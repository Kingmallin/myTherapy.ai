<?php

namespace DoctrineProxies\__CG__\App\Models\User;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \App\Models\User\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'id', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'name', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'surName', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'username', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'penName', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'dob', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'email', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'password', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'uUid', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'verified', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'ip', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'timeZone', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'status', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'subscriptionLevel', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'active', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'createdDateTime'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'id', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'name', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'surName', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'username', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'penName', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'dob', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'email', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'password', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'uUid', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'verified', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'ip', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'timeZone', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'status', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'subscriptionLevel', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'active', '' . "\0" . 'App\\Models\\User\\User' . "\0" . 'createdDateTime'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(?\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(?\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(string $name): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getSurName(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSurName', []);

        return parent::getSurName();
    }

    /**
     * {@inheritDoc}
     */
    public function setSurName(string $surName): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSurName', [$surName]);

        parent::setSurName($surName);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', []);

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsername(string $username): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsername', [$username]);

        parent::setUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function getPenName(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPenName', []);

        return parent::getPenName();
    }

    /**
     * {@inheritDoc}
     */
    public function setPenName(string $penName): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPenName', [$penName]);

        parent::setPenName($penName);
    }

    /**
     * {@inheritDoc}
     */
    public function getDob(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDob', []);

        return parent::getDob();
    }

    /**
     * {@inheritDoc}
     */
    public function setDob(string $dob): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDob', [$dob]);

        parent::setDob($dob);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail(string $email): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword(string $password): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$password]);

        parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function isVerified(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isVerified', []);

        return parent::isVerified();
    }

    /**
     * {@inheritDoc}
     */
    public function setVerified(bool $verified): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVerified', [$verified]);

        parent::setVerified($verified);
    }

    /**
     * {@inheritDoc}
     */
    public function getIp(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIp', []);

        return parent::getIp();
    }

    /**
     * {@inheritDoc}
     */
    public function setIp(string $ip): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIp', [$ip]);

        parent::setIp($ip);
    }

    /**
     * {@inheritDoc}
     */
    public function getTimeZone(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTimeZone', []);

        return parent::getTimeZone();
    }

    /**
     * {@inheritDoc}
     */
    public function setTimeZone(string $timeZone): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTimeZone', [$timeZone]);

        parent::setTimeZone($timeZone);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus(int $status): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getUuid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUuid', []);

        return parent::getUuid();
    }

    /**
     * {@inheritDoc}
     */
    public function setUuid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUuid', []);

        return parent::setUuid();
    }

    /**
     * {@inheritDoc}
     */
    public function setSubscriptionLevel(\App\Enums\SubscriptionLevel $subscriptionLevel)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubscriptionLevel', [$subscriptionLevel]);

        return parent::setSubscriptionLevel($subscriptionLevel);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubscriptionLevel(): \App\Enums\SubscriptionLevel
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubscriptionLevel', []);

        return parent::getSubscriptionLevel();
    }

    /**
     * {@inheritDoc}
     */
    public function getActive(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActive', []);

        return parent::getActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setActive(int $active): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActive', [$active]);

        parent::setActive($active);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedDateTime(): \DateTimeImmutable
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedDateTime', []);

        return parent::getCreatedDateTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedDateTime(\DateTimeImmutable $createdDateTime): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedDateTime', [$createdDateTime]);

        parent::setCreatedDateTime($createdDateTime);
    }

}
